Problem Statement:

Cybersecurity teams often face difficulties in quickly extracting critical information from threat
reports, such as Indicators of Compromise (IoCs), Threat Actors, Malware, and attack methods (TTPs).
This process is usually manual, time-consuming, and prone to errors, slowing down the response to
emerging threats.

Proposed Solution:

We propose a Flask-based web application that automates the extraction of key cybersecurity data
from PDF threat reports. The application will use Natural Language Processing (NLP) to identify and
extract IoCs, Threat Actors, Malware, TTPs, and Targeted Entities. Additionally, it will analyze
extracted IoCs with VirusTotal for malicious activity.

Key Features:

PDF Upload: Users can upload PDF reports, and the system will extract the text

Automated Extraction: The app will automatically extract threat intelligence such as IoCs, Malware, and TTPs.

IoC Analysis: Extracted IoCs (hashes)  will be checked against VirusTotal for potential threats.


Uniqueness:

Faster Threat Detection: Automates manual analysis, reducing the time needed to identify threats.
Comprehensive Analysis: Extracts, analyzes, and enriches threat data automatically.


How IoCs are extracted and Enriched:

Text Extraction: The text from the pdf is extracted using pdfminer

Pattern Matching: Regular expressions are used to identify common IoC patterns like IP addresses, URLs, emails, and file hashes and it
is done with the help of iocextract library
		  
Enrichment and Analysis: VirusTotal is used to analyze file hashes for malicious activity and if found the metadata is attached with the
corresponding hash

IoCs are not extracted using Named Entity Recognition (NER) because it requires more time to
analyze and extract the text. However, with regular expressions, we can easily extract them more
efficiently.

How other threat entities are extarcted:

The other threat entities like TTPs(Tactics, Techniques, and Procedures), malware, and targeted entities are extarcted with help
of the Large Languae Model qwen2.5 using Contextual Analysis.

Input Text: the text containing threat intelligence data is extracted from pdf

Prompt Creation: Generate specific prompts for each entity type (TTPs, Malware, Targeted
ntities). These prompts instruct the model to extract only the relevant details.
If the user selects to extract all entities, a combined prompt is used to gather all the details at once,
eliminating the need to query the LLM separately for each entity.

API Request: The text along with the generated prompt is sent to the llm qwen for contextual analysis.

Model Processing: The model processes the text, identifies the entities (TTPs, malware, and targeted entities),
and returns the results in structured JSON format.

Return Results: Parse the JSON response and return the extracted entities to the user.


overall flow of the process:

1) User Uploads PDF: The user uploads a PDF file for analysis through the web interface.
2) Text Extraction: The text is extracted from the PDF using the pdfminer library.
3) Field Selection: The user selects the fields (IoCs, TTPs, threat actors, malware, and targeted entities) 
they want to extract from the text.
4) Entity Extraction: For each selected field, a respective query is sent to Ollama (qwen2.5) to extract the relevant entities
5) Metadata for IoCs: If IoCs (hashes) are extracted, they are analyzed using the VirusTotal API to gather metadata
6) Result Compilation: The extracted entities and metadata are compiled into a structured response.
7) Display Results: The extracted data is displayed to the user in a readable format.

Requirements:

pdfminer.six
iocextract
requests
ollama
python-dotenv
flask


Install the packages from the requirement.txt in the project folder
Apart from those requirements, install ollama in the machine and download the qwen2.5 model 

link for downloading ollama -> https://ollama.com/download
command to install qwen2.5 -> ollama run qwen2.5

setup account in virustotal and enter the api key in .env file present in the project folder for entity enrichment


Once all done, go inside the project folder and run the python file main.py
and go to the link -> http://127.0.0.1:5000


link to github -> https://github.com/sponge-24/threat_intelligence_extractor

link to the demo video -> https://drive.google.com/file/d/1oe8-Zx10FIKcTl0aezWg1JE_G7DjcPq3/view?usp=sharing